#include "utils/helpers.hpp"
#include "control/lqr.hpp"

int main(void)
{
    Eigen::MatrixXd A(12, 12);
    Eigen::MatrixXd B(12, 4);
    Eigen::MatrixXd Q(12, 12);
    Eigen::MatrixXd R(4, 4);
    Eigen::MatrixXd P_true(12, 12);
    Eigen::MatrixXd M(12,4);
    Eigen::MatrixXd S, K;

    A << 0,      0,      0,      1,      0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      1,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      1,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,  19.62,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0, -19.62,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,      0,    0.5,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    0.5,      0,
         0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    0.5,
         0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0;

    B << 0,        0,        0,        0,
         0,        0,        0,        0,
         0,        0,        0,        0,
      9.81,        0,        0,        0,
         0,    -9.81,        0,        0,
         0,        0, 0.214791,        0,
         0,        0,        0,        0,
         0,        0,        0,        0,
         0,        0,        0,        0,
         0, -49.4854,        0,        0,
  -46.0828,        0,        0,        0;


    Q.setZero();
    Q.diagonal() << 1, 1, 5, 0.1, 0.1, 0.5, 2, 2, 1e-10, 2, 2, 5;
    R.setZero();
    R.diagonal() << 5, 5, 0.01, 0.01;
    M.setZero();

    P_true << 1.17383,  0,  0,    0.642804,  0,  0, 0,  3.73507, 0, 0, 0.185584,  0,
              0, 1.16941,  0,  0,  0.637673,  0,  -3.67084,  0, 0,  -0.1718,  0,  0,
              0,  0,  3.59282,  0,  0,  1.04042,  0,  0,  0,  0,  0,  0,
       0.642804,  0,  0,  0.567606,  0,  0,  0,  4.01868,  0,  0,  0.178051,  0,
              0, 0.637673, 0, 0, 0.562113, 0, -3.9548, 0, 0, -0.164519, 0, 0,
              0, 0, 1.04042, 0, 0, 0.74793, 0, 0, 0, 0, 0, 0,
              0, -3.67084, 0, 0, -3.9548, 0, 39.4847, 0, 0, 1.35133, 0, 0,
        3.73507, 0, 0, 4.01868, 0, 0, 0, 40.1282, 0, 0, 1.46957, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 3.2299e-10,           0,           0, 6.00641e-11,
              0, -0.1718, 0, 0, -0.164519, 0, 1.35133, 0, 0, 0.115342, 0, 0,
       0.185584, 0, 0, 0.178051, 0, 0, 0, 1.46957, 0, 0, 0.128294, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 6.00641e-11, 0, 0, 2.15012;

    /** call LQR */
    polympc::lqr(A,B,Q,R,M,S,K, true);

    return EXIT_SUCCESS;
}
