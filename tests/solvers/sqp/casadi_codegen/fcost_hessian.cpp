/* This file was automatically generated by CasADi.
   The CasADi copyright holders make no ownership claim of its contents. */
/* How to prefix internal symbols */
#ifdef CODEGEN_PREFIX
  #define NAMESPACE_CONCAT(NS, ID) _NAMESPACE_CONCAT(NS, ID)
  #define _NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) fcost_hessian_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[59] = {55, 1, 0, 55, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54};
static const casadi_int casadi_s1[113] = {55, 55, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54};

/* fcost_hessian:(i0[55])->(o0[55x55,55nz]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, void* mem) {
  casadi_real a0, a1, a2, a3, a4, a5;
    a0=2.0200000000000000e+00;
    if (res[0]!=0) res[0][0]=a0;
    if (res[0]!=0) res[0][1]=a0;
    if (res[0]!=0) res[0][2]=a0;
    a0=1.8037152060000561e-01;
    if (res[0]!=0) res[0][3]=a0;
    if (res[0]!=0) res[0][4]=a0;
    if (res[0]!=0) res[0][5]=a0;
    a1=2.9962847939999443e-01;
    if (res[0]!=0) res[0][6]=a1;
    if (res[0]!=0) res[0][7]=a1;
    if (res[0]!=0) res[0][8]=a1;
    a2=2.9962847939999437e-01;
    if (res[0]!=0) res[0][9]=a2;
    if (res[0]!=0) res[0][10]=a2;
    if (res[0]!=0) res[0][11]=a2;
    a3=1.8037152060000566e-01;
    if (res[0]!=0) res[0][12]=a3;
    if (res[0]!=0) res[0][13]=a3;
    if (res[0]!=0) res[0][14]=a3;
    a4=4.0000000000000001e-02;
    if (res[0]!=0) res[0][15]=a4;
    if (res[0]!=0) res[0][16]=a4;
    if (res[0]!=0) res[0][17]=a4;
    if (res[0]!=0) res[0][18]=a0;
    if (res[0]!=0) res[0][19]=a0;
    if (res[0]!=0) res[0][20]=a0;
    if (res[0]!=0) res[0][21]=a1;
    if (res[0]!=0) res[0][22]=a1;
    if (res[0]!=0) res[0][23]=a1;
    if (res[0]!=0) res[0][24]=a2;
    if (res[0]!=0) res[0][25]=a2;
    if (res[0]!=0) res[0][26]=a2;
    if (res[0]!=0) res[0][27]=a3;
    if (res[0]!=0) res[0][28]=a3;
    if (res[0]!=0) res[0][29]=a3;
    a5=2.0000000000000000e-02;
    if (res[0]!=0) res[0][30]=a5;
    if (res[0]!=0) res[0][31]=a5;
    if (res[0]!=0) res[0][32]=a5;
    if (res[0]!=0) res[0][33]=a5;
    if (res[0]!=0) res[0][34]=a5;
    if (res[0]!=0) res[0][35]=a0;
    if (res[0]!=0) res[0][36]=a0;
    if (res[0]!=0) res[0][37]=a1;
    if (res[0]!=0) res[0][38]=a1;
    if (res[0]!=0) res[0][39]=a2;
    if (res[0]!=0) res[0][40]=a2;
    if (res[0]!=0) res[0][41]=a3;
    if (res[0]!=0) res[0][42]=a3;
    if (res[0]!=0) res[0][43]=a4;
    if (res[0]!=0) res[0][44]=a4;
    if (res[0]!=0) res[0][45]=a0;
    if (res[0]!=0) res[0][46]=a0;
    if (res[0]!=0) res[0][47]=a1;
    if (res[0]!=0) res[0][48]=a1;
    if (res[0]!=0) res[0][49]=a2;
    if (res[0]!=0) res[0][50]=a2;
    if (res[0]!=0) res[0][51]=a3;
    if (res[0]!=0) res[0][52]=a3;
    if (res[0]!=0) res[0][53]=a5;
    if (res[0]!=0) res[0][54]=a5;
    return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int fcost_hessian(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, void* mem){
    return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT void fcost_hessian_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void fcost_hessian_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int fcost_hessian_n_in(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int fcost_hessian_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT const char* fcost_hessian_name_in(casadi_int i){
    switch (i) {
        case 0: return "i0";
        default: return 0;
    }
}

extern "C" CASADI_SYMBOL_EXPORT const char* fcost_hessian_name_out(casadi_int i){
    switch (i) {
        case 0: return "o0";
        default: return 0;
    }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* fcost_hessian_sparsity_in(casadi_int i) {
    switch (i) {
        case 0: return casadi_s0;
        default: return 0;
    }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* fcost_hessian_sparsity_out(casadi_int i) {
    switch (i) {
        case 0: return casadi_s1;
        default: return 0;
    }
}

extern "C" CASADI_SYMBOL_EXPORT int fcost_hessian_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
    if (sz_arg) *sz_arg = 1;
    if (sz_res) *sz_res = 1;
    if (sz_iw) *sz_iw = 0;
    if (sz_w) *sz_w = 0;
    return 0;
}


